
# # # # # INICIO LIBRER√çAS # # # # #

# Librer√≠a para poder utilizar Streamlit:
import streamlit as st

# Librer√≠a para poder cambiar de p√°ginas de visualizaci√≥n:
from streamlit_extras.switch_page_button import switch_page

# Librer√≠a para utilizar el men√∫ de opciones (barra de navegaci√≥n):
from streamlit_option_menu import option_menu  

# # # # # FIN LIBRER√çAS # # # # #



# # # # # INICIO NUESTRO M√âTODO FUNCTION # # # # #

# Configuraci√≥n de la p√°gina:
st.set_page_config(page_title=" ‚öôÔ∏è Nuestro M√©todo üñ•Ô∏è", page_icon=":car:", layout="wide");

# Se aplica el color de fondo deseado:
page_bg_color = """
    <style>
    [data-testid="stAppViewContainer"] {
        background-color: #fffafe;
    }
    </style>
"""
st.markdown(page_bg_color, unsafe_allow_html=True);

# # # Barra de Navegaci√≥n Superior # # #
with st.container():
    # Se define la barra de navegaci√≥n:
    menu = option_menu(

        # No se coloca t√≠tulo al men√∫:
        menu_title = None,

        # Se colocan las opciones de la barra de navegaci√≥n:
        options = ["Inicio", "Tasaci√≥n - Particular", "Tasaci√≥n - Empresa", "Sobre Nosotros", "Nuestro M√©todo", "Cont√°ctanos"],

        # Se colocan iconos acompa√±ando a los textos:
        icons = ["house", "person-fill", "building", "info-circle", "clipboard-check", "phone"],

        # Orientaci√≥n horizontal de la barra:
        orientation = "horizontal",

        # Se establece visualmente que se est√° en la pantalla de 'Nuestro M√©todo' [index = 4]
        default_index = 4,

        # Se define el estilo de la barra de navegaci√≥n:
        styles={
            "container": {"padding": "0!important", "background-color": "#fffafe"},  # Se establece el color del container como el color de fondo
            "icon": {"color": "#5c0048", "font-size": "20px"},  # Color de los √≠conos
            # Estilo de las letras:
            "nav-link": {
                "font-size": "16px",
                "text-align": "center",
                "padding": "5px",
                "margin": "0px",
                "color": "#5c0048",
                "font-weight": "bold",
            },
            "nav-link-selected": {"background-color": "#eeb1e1"},  # Color de la opci√≥n seleccionada
        }
    );

    # Se redirije a la p√°gina correspondiente seg√∫n la opci√≥n seleccionada:
    if menu == "Inicio":
        switch_page("main_page")
    elif menu == "Tasaci√≥n - Particular":
        switch_page("particular_page");
    elif menu == "Tasaci√≥n - Empresa":
        switch_page("empresa_page"); 
    elif menu == "Sobre Nosotros":
        switch_page("nosotros_page"); 
    elif menu == "Nuestro M√©todo":
        pass  # metodo_page es Nuestro M√©todo por lo que no se hace nada si hacen click
    elif menu == "Cont√°ctanos":
        switch_page("contacto_page");

# Espacio:
st.markdown("<br>", unsafe_allow_html = True);

# T√≠tulo ‚öôÔ∏è Nuestro M√©todo üñ•Ô∏è:
st.markdown("<h1 style='text-align: center; font-family: \"Droid Sans Mono\", monospace;'>‚öôÔ∏è Nuestro M√©todo üñ•Ô∏è  </h1>", unsafe_allow_html=True);

# Espacio:
st.markdown("<br>", unsafe_allow_html=True)

# Texto explicativo del m√©todo:
st.write("""
    ## üîç ¬øC√≥mo desarrollamos el modelo de predicci√≥n?
    
    El principal objetivo de este proyecto es predecir el **precio de venta** de un coche usado a partir de sus caracter√≠sticas.
    Para ello, analizamos nuestra base de datos con m√°s de **400,000 anuncios**.
    
    ### üèÅ Pasos del proceso:

    **1Ô∏è‚É£ Lectura y Guardado de Datos:**
    - Importamos y exploramos el dataset inicial.
    
    **2Ô∏è‚É£ An√°lisis Exploratorio de Datos:**
    - Eliminaci√≥n de constantes y duplicados.
    - Estudio detallado de valores nulos y su tratamiento.
    - An√°lisis de la distribuci√≥n de las variables num√©ricas y categ√≥ricas.
    
    **3Ô∏è‚É£ Tratamiento de Nulos:**
    - **Fabricante:** Modelo de lenguaje RoBERTa (`roberta-base-squad2`).
    - **Cilindrada & Tracci√≥n:** Combinaci√≥n de otras variables y ajuste manual.
    - **Combustible & Transmisi√≥n:** B√∫squeda de palabras clave en el modelo y descripci√≥n.
    - **Pintura Exterior:** Inferencia desde la descripci√≥n (rellenando ~50,000 nulos).
    - **Kilometraje:** Expresiones regulares para detecci√≥n y ajuste autom√°tico.
    
    **4Ô∏è‚É£ Codificaci√≥n de Variables Categ√≥ricas:**
    - Uso de `LabelEncoder` optimizado para m√∫ltiples columnas.
    
    **5Ô∏è‚É£ Selecci√≥n de Caracter√≠sticas Relevantes:**
    - Aplicaci√≥n del an√°lisis del Factor de Inflaci√≥n de la Varianza (VIF).
    
    **6Ô∏è‚É£ Entrenamiento del Modelo:**
    - Algoritmo seleccionado: **Random Forest Regressor**.
    - Optimizaci√≥n de hiperpar√°metros con `GridSearchCV`.
    - Evaluaci√≥n del rendimiento del modelo.

    Finalmente, el modelo entrenado ha sido almacenado en **Hugging Face Hub**, permitiendo su integraci√≥n sin sobrecargar GitHub.
""");

# Espacio:
st.markdown("<br>", unsafe_allow_html = True);

# Bot√≥n para descargar el notebook del proyecto:
with open("src/FinalProject_ClaraArribas.ipynb", "rb") as file:
    st.download_button(
        label = "üì• Descargar Notebook Completo",
        data = file,
        file_name = "FinalProject_ClaraArribas.ipynb",
        mime = "application/octet-stream"
    );

# Espacio:
st.markdown("<br>", unsafe_allow_html=True)


# # # # # FIN NUESTRO M√âTODO FUNCTION # # # # #
